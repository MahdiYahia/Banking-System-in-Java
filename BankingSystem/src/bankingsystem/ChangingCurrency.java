/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bankingsystem;

import java.util.*; 
import java.io.*;


/**
 *
 * @author mahdi
 */
public class ChangingCurrency extends javax.swing.JFrame {
    private String currentUsername;
    public String previousCurrency;
    /**
     * Creates new form ChangingCurrency
     */
    public ChangingCurrency(String currentUsername) {
        initComponents();
        this.currentUsername=currentUsername;
        getPreviousCurrency();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        newCurrency = new javax.swing.JComboBox<>();
        jButtonNewCurrency = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Choose the new currency you would like to use:");

        newCurrency.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EUR", "USD", "HUF", " " }));

        jButtonNewCurrency.setText("Apply Change");
        jButtonNewCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewCurrencyActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jButtonNewCurrency)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNewCurrency)
                    .addComponent(backButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    public void getPreviousCurrency(){
        User CurrentUser;
        try
        {   
            // Reading the object from a file
            FileInputStream file = new FileInputStream(currentUsername+"data.ser");
            ObjectInputStream in = new ObjectInputStream(file);
              
            // Method for deserialization of object
            CurrentUser = (User)in.readObject();
              this.previousCurrency=CurrentUser.currency;
            in.close();
            file.close();
            }
          
        catch(IOException ex)
        {
            System.out.println("IOException is caught");
        }
          
        catch(ClassNotFoundException ex)
        {
            System.out.println("ClassNotFoundException is caught");
        }
    
    }
    
    public void updateCurrency( double changeRate, String newCurrency)
    {
        User CurrentUser;
    
          try
        {   
            // Reading the object from a file
            FileInputStream ifile = new FileInputStream(currentUsername+"data.ser");
            ObjectInputStream in = new ObjectInputStream(ifile);
              
            // Method for deserialization of object
            CurrentUser = (User)in.readObject();
              
            in.close();
            ifile.close();
              

            CurrentUser.currency=newCurrency;
            
            //Saving of object in a file
            FileOutputStream ofile = new FileOutputStream(currentUsername+"data.ser");
            ObjectOutputStream out = new ObjectOutputStream(ofile);
              
            // Method for serialization of object
            out.writeObject(CurrentUser);
              
            out.close();
            ofile.close();
            
            System.out.println("Object has been serialized");    
        }
        catch(IOException ex)
        {
            System.out.println("IOException is caught");
        }
          
        catch(ClassNotFoundException ex)
        {
            System.out.println("ClassNotFoundException is caught");
        
    
       }      
        
        LinkedList<String> fileContent=new LinkedList<>();  
        double tmpAmount;
        String currentLine;
        try{
           File thisUserHistory = new File(this.currentUsername+"history.txt");
           Scanner histroryFile = new Scanner(thisUserHistory);
           while (histroryFile.hasNextLine()) {
              String data = histroryFile.nextLine();
              String[] arrOfData   =data.split("   ",3);
              tmpAmount =Double.parseDouble(arrOfData[0])*changeRate;
              arrOfData[0]=String.valueOf(tmpAmount);
              currentLine=arrOfData[0]+"   "+arrOfData[1]+"   "+arrOfData[2];
              
              fileContent.add(currentLine);
           }
            histroryFile.close();  
          
            //Saving of object in a file
            FileWriter fw = new FileWriter(this.currentUsername+"history.txt",false);
            PrintWriter pw = new PrintWriter(fw);
            // Method for serialization of object
            for (int i=0;i< fileContent.size();i++){
                pw.println(fileContent.get(i));
            }
            pw.close();
            fw.close();
           }      
           catch(IOException ex){
            System.out.println("IOException is caught");
           }
      
      }
     
    private void jButtonNewCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewCurrencyActionPerformed
        // TODO add your handling code here:
        String eur="EUR";
        String huf="HUF";
        String usd="USD";
        if (previousCurrency.equals(huf) && newCurrency.getSelectedItem().toString().equals(eur))
            updateCurrency(0.0028,newCurrency.getSelectedItem().toString());
        else if (previousCurrency.equals(huf) && newCurrency.getSelectedItem().toString().equals(usd)){
            updateCurrency(0.0033,newCurrency.getSelectedItem().toString());}
        else if (previousCurrency.equals(eur) && newCurrency.getSelectedItem().toString().equals(huf))
            updateCurrency(360,newCurrency.getSelectedItem().toString());
        else if (previousCurrency.equals(eur) && newCurrency.getSelectedItem().toString().equals(usd))
            updateCurrency(1.20,newCurrency.getSelectedItem().toString());
        else if (previousCurrency.equals(usd) && newCurrency.getSelectedItem().toString().equals(huf)){
            updateCurrency(300,newCurrency.getSelectedItem().toString());}
        else if (previousCurrency.equals(usd) && newCurrency.getSelectedItem().toString().equals(eur))
            updateCurrency(0.84,newCurrency.getSelectedItem().toString());
        dispose();
    }//GEN-LAST:event_jButtonNewCurrencyActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton jButtonNewCurrency;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> newCurrency;
    // End of variables declaration//GEN-END:variables
}
